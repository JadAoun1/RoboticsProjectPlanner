"""
Django settings for robotics_planner project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

# Try to import dj_database_url, handle gracefully if not available
try:
    import dj_database_url
    HAS_DJ_DATABASE_URL = True
except ImportError:
    HAS_DJ_DATABASE_URL = False
    print("Warning: dj_database_url not available, using fallback database configuration")

# Load environment variables from .env file (only in development)
# In production, environment variables should be set by the platform
if not os.getenv('RENDER'):  # Render sets this environment variable
    load_dotenv()

# Debug: Print environment info
print(f"RENDER environment variable: {os.getenv('RENDER')}")
print(f"DEBUG environment variable: {os.getenv('DEBUG')}")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-development-key-change-in-production')

# SECURITY WARNING: don't run with debug turned on in production!
# Default to False for production safety, only True if explicitly set
DEBUG = os.getenv('DEBUG', 'False').lower() in ('true', '1', 'yes', 'on')

# Override: Force DEBUG=False on Render platform for production deployment
if os.getenv('RENDER'):
    DEBUG = False
    print("Render platform detected: Forcing DEBUG=False for production")

# Debug: Print DEBUG value and reasoning
print(f"Final DEBUG setting: {DEBUG} (from env: '{os.getenv('DEBUG', 'Not Set')}')")

# ALLOWED_HOSTS configuration
if DEBUG:
    ALLOWED_HOSTS = ['localhost', '127.0.0.1']
    print("Using development ALLOWED_HOSTS")
else:
    # Production: Allow specific domains and common deployment platforms
    ALLOWED_HOSTS = [
        'localhost',
        '127.0.0.1',
        'roboticsprojectplanner.onrender.com',  # Specific Render domain
        '.herokuapp.com',  # Heroku wildcard
        '.railway.app',    # Railway wildcard
    ]
    
    # Add any additional hosts from environment variable
    additional_hosts = os.getenv('ALLOWED_HOSTS', '')
    if additional_hosts:
        ALLOWED_HOSTS.extend([host.strip() for host in additional_hosts.split(',') if host.strip()])
    
    # Debug: Print ALLOWED_HOSTS in production logs
    print(f"Production ALLOWED_HOSTS: {ALLOWED_HOSTS}")


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "whitenoise.runserver_nostatic",
    "django.contrib.staticfiles",
    # Local apps
    "accounts",
    "projects",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "robotics_planner.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / 'templates'],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "robotics_planner.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database Configuration - PostgreSQL only
# Use DATABASE_URL for production (Heroku, etc.) or fall back to individual environment variables
DATABASE_URL = os.getenv('DATABASE_URL')

# Debug: Print database configuration info
print(f"DATABASE_URL present: {bool(DATABASE_URL)}")
print(f"HAS_DJ_DATABASE_URL: {HAS_DJ_DATABASE_URL}")

if DATABASE_URL and HAS_DJ_DATABASE_URL:
    DATABASES = {
        'default': dj_database_url.parse(DATABASE_URL)
    }
    print("Using DATABASE_URL for database configuration")
else:
    # Check if we're on Render but don't have DATABASE_URL - use SQLite as fallback
    if os.getenv('RENDER') and not DATABASE_URL:
        print("RENDER detected but no DATABASE_URL - using SQLite fallback for demo")
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db.sqlite3',
            }
        }
    else:
        # PostgreSQL configuration using environment variables
        DATABASES = {
            "default": {
                "ENGINE": "django.db.backends.postgresql",
                "NAME": os.getenv('DATABASE_NAME', 'robotics_planner'),
                "USER": os.getenv('DATABASE_USER', 'postgres'),
                "PASSWORD": os.getenv('DATABASE_PASSWORD', ''),
                "HOST": os.getenv('DATABASE_HOST', 'localhost'),
                "PORT": os.getenv('DATABASE_PORT', '5432'),
            }
        }
        print(f"Using individual env vars - DB: {DATABASES['default']['NAME']}, Host: {DATABASES['default']['HOST']}")


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "/static/"
STATICFILES_DIRS = [
    BASE_DIR / "static",
]
STATIC_ROOT = BASE_DIR / 'staticfiles'

# WhiteNoise configuration for serving static files in production
if not DEBUG:
    # Use the simpler storage backend for production
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedStaticFilesStorage'
else:
    # Use Django's default storage for development
    STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'

# Additional WhiteNoise settings
WHITENOISE_USE_FINDERS = True
WHITENOISE_SKIP_COMPRESS_EXTENSIONS = ['jpg', 'jpeg', 'png', 'gif', 'webp', 'zip', 'gz', 'tgz', 'bz2', 'tbz', 'xz', 'br']

# Login/Logout URLs
LOGIN_URL = 'accounts:login'
LOGIN_REDIRECT_URL = 'projects:dashboard'
LOGOUT_REDIRECT_URL = 'accounts:login'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Security settings for production
if not DEBUG:
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_SECONDS = 31536000
    SECURE_REDIRECT_EXEMPT = []
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
